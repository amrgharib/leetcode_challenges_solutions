class MedianFinder:

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.data = []
        self.n = 0

    def addNum(self, num: int) -> None:
        self.data.append(num)
        self.n += 1
        

    def findMedian(self) -> float:
        self.data.sort()
        if self.n % 2 != 0:
            return self.data[self.n//2]
        else:
            return (self.data[self.n//2-1] + self.data[self.n//2])/2.0
        


# Your MedianFinder object will be instantiated and called as such:
# obj = MedianFinder()
# obj.addNum(num)
# param_2 = obj.findMedian()


# Top solution using heaps

# class MedianFinder:

#     def __init__(self):
#         """
#         initialize your data structure here.
#         """
        
#         self.small = []  # the smaller half of the list, max heap (invert min-heap)
#         self.large = []
        
       
#     def addNum(self, num: int) -> None:
        
#         if len(self.small) == len(self.large):
#             heappush(self.large, -heappushpop(self.small, -num))
#         else:
#             heappush(self.small, -heappushpop(self.large, num))
        
      

#     def findMedian(self) -> float:
        
#         if len(self.small) == len(self.large):
#             return float(self.large[0] - self.small[0]) / 2.0
#         else:
#             return float(self.large[0])
